plot(dt[startFit:endFit, t], dt[startFit:endFit, channel], type = "l")
p <- asin(x[1]/A) - 2*pi*f*t[1]
asin(x[1]/A)
plot(t, (asin(x[/A) - 2*pi*f*t))
plot(t, (asin(x/A) - 2*pi*f*t))
x
resnls <- nls(formula = channel ~ I(A*sin(2*pi*f*t + p) + o),
data = dt[startFit:endFit],
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
p <- asin(x[1]/A)
resnls <- nls(formula = channel ~ I(A*sin(2*pi*f*t + p) + o),
data = dt[startFit:endFit],
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
p <- asin(max(x)/A)
max(x)
max(x)/A
asin(1.734928)
p <- asin(x[1]/A)
diff(t)
t0 <- seq.int(from = 0,
by = 1e-05,
length.out = length(data))
length(data)
t_seg <- seq.int(from = codedt[start_idx == idx_lists[1], start_time],
to = codedt[start_idx == idx_lists[1], end_time],
length.out = length(data))
data <- as.vector(h5read(filename,
paste0(channames[chan == dataChan, name], "/values/"),
index = list(idx_lists[1]:idx_lists[2],1)))
h5closeAll()
t_seg <- seq.int(from = codedt[start_idx == idx_lists[1], start_time],
to = codedt[start_idx == idx_lists[1], end_time],
length.out = length(data))
t0 <- seq.int(from = 0, by = 1e-05, length.out = length(t))
plot(t0, dt[startFit:endFit, channel], type = "l")
fitres <- Acoef*sin(2*pi*fcoef*t0) + ocoef
lines(dt[startFit:endFit, t], fitres, col = "blue")
lines(t0, fitres, col = "blue")
fitres <- Acoef*sin(2*pi*fcoef*t0 + pcoef) + ocoef
lines(t0, fitres, col = "blue")
pcoef <- 11.401958
t0 <- seq.int(from = 0, by = 1e-05, length.out = length(t))
fitres <- Acoef*sin(2*pi*fcoef*t0 + pcoef) + ocoef
lines(t0, fitres, col = "blue")
## plot fit data
t0 <- seq.int(from = 0, by = 1e-05, length.out = length(t))
fitres_init <- Acoef*sin(2*pi*fcoef*t0) + ocoef
plot(t0, fitres_init, type = "l")
lines(t0, fitres, col = "blue")
plot(dt[startFit:endFit, t], dt[startFit:endFit, channel], type = "l")
#A <- (max(x)-min(x))/2 #amplitude estimate
A <- sqrt(mean(x)^2 + (((max(x)-min(x))/2)^2)/2)
A <- (max(x)-min(x))/2 #amplitude estimate
resnls <- nls(formula = channel ~ I(A*sin(2*pi*f*t + p) + o),
data = dt[startFit:endFit],
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
resnls <- nls(formula = x ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
reslm <- lm(x ~ I(A_coef*sin(2*pi*f_coef * t + p_coef) + o_coef))
#A*sin(2*pi*f*t + p) + o)
Acoef <- summary(resnls)$coefficients[1]
fcoef <- summary(resnls)$coefficients[2]
pcoef <- summary(resnls)$coefficients[3]
#pcoef <- 11.401958
ocoef <- summary(resnls)$coefficients[4]
reslm <- lm(x ~ I(A_coef*sin(2*pi*f_coef * t + p_coef) + o_coef))
summary(reslm)
summary(reslm)adj.r.squared
summary(reslm)$adj.r.squared
detach("package:simbaR", unload = TRUE)
library(simbaR)
dt_sum <- dt[startFit:endFit, sineOptR(x = channel, t = t, samprate = dataSamprate), by = c("code", "time")]
View(dt_sum)
fn <- file.choose()
filename <- fn
dataChan <- "Ch1"
markChan <- "Ch4"
offset <- -200
width <- 30
names <- data.table(h5ls(filename))
## read in file channel information
channames <- data.table(name = names[group == "/", name])
channames[, "chan" := gsub("^.*_", "", name)]
dataTitle <- intToUtf8(h5read(filename, paste0(channames[chan == dataChan, name], "/title/"))[1,])
dataSamprate <- h5read(filename, paste0(channames[chan == dataChan, name], "/interval/"))[1,]
dataStime <- h5read(filename, paste0(channames[chan == dataChan, name], "/start/"))[,1]
dataLen <- h5read(filename, paste0(channames[chan == dataChan, name], "/length/"))[,1]
assign("dataSamprate", dataSamprate, envir = .GlobalEnv)
## create time data.table for entire file
t <- seq.int(from = dataStime, to = dataStime + dataLen*dataSamprate, length.out = dataLen)
dt_time <- data.table(t)
setattr(dt_time, "sorted", "t")
rm(t)
## calculate import start/stop times based on offset and width
startTime <- (offset-width*2)/1000
endTime <- (offset+width*3)/1000
## calculate analysis start/stop times based on offset and width
startFit <- (2*width/1000)/dataSamprate + 1
endFit <- startFit + (width/1000)/dataSamprate - 1
markTitle <- intToUtf8(h5read(filename, paste0(channames[chan == markChan, name], "/title/"))[1,])
markCodes <- h5read(filename, paste0(channames[chan == markChan, name], "/codes/"))
markTimes <- h5read(filename, paste0(channames[chan == markChan, name], "/times/"))
codedt <- data.table(time = markTimes[,1], ASCIIcode = markCodes[,1])
rm(markTimes, markCodes)
codedt[, lettercode := intToUtf8(ASCIIcode), by = time]
## get time index for the start of each marker code
codedt[, t_idx := dt_time[.(time), roll = "nearest", which = TRUE]]
codedt[, start_time := dt_time[.(time+startTime), roll = "nearest"]]
codedt[, end_time := dt_time[.(time+endTime), roll = "nearest"]]
codedt[, start_idx := dt_time[.(time+startTime), roll = "nearest", which = TRUE]]
codedt[, end_idx := dt_time[.(time+endTime), roll = "nearest", which = TRUE]]
rm(dt_time)
idx_lists <- mapply(c, codedt[, start_idx], codedt[, end_idx], SIMPLIFY = FALSE, USE.NAMES = FALSE)
## sectionSineR
idx_lists <- idx_lists[[1]]
assign("dataSamprate", dataSamprate, envir = .GlobalEnv)
h5closeAll()
data <- as.vector(h5read(filename,
paste0(channames[chan == dataChan, name], "/values/"),
index = list(idx_lists[1]:idx_lists[2],1)))
h5closeAll()
t_seg <- seq.int(from = codedt[start_idx == idx_lists[1], start_time],
to = codedt[start_idx == idx_lists[1], end_time],
length.out = length(data))
dt <- data.table(t = t_seg,
channel = data)
rm(t_seg, data)
## add time and code markers
dt[, code := codedt[start_idx == idx_lists[1], lettercode]]
dt[, time := codedt[start_idx == idx_lists[1], time]]
## perform DC remove of each channel
#dt[, DC := removeDC(channel, 1000)]
dt_sum <- dt[startFit:endFit, sineOptR(x = channel, t = t, samprate = dataSamprate), by = c("code", "time")]
markTitle <- intToUtf8(h5read(filename, paste0(channames[chan == markChan, name], "/title/"))[1,])
markCodes <- h5read(filename, paste0(channames[chan == markChan, name], "/codes/"))
markTimes <- h5read(filename, paste0(channames[chan == markChan, name], "/times/"))
codedt <- data.table(time = markTimes[,1], ASCIIcode = markCodes[,1])
rm(markTimes, markCodes)
codedt[, lettercode := intToUtf8(ASCIIcode), by = time]
## get time index for the start of each marker code
codedt[, t_idx := dt_time[.(time), roll = "nearest", which = TRUE]]
codedt[, start_time := dt_time[.(time+startTime), roll = "nearest"]]
codedt[, end_time := dt_time[.(time+endTime), roll = "nearest"]]
codedt[, start_idx := dt_time[.(time+startTime), roll = "nearest", which = TRUE]]
codedt[, end_idx := dt_time[.(time+endTime), roll = "nearest", which = TRUE]]
rm(dt_time)
idx_lists <- mapply(c, codedt[, start_idx], codedt[, end_idx], SIMPLIFY = FALSE, USE.NAMES = FALSE)
## sectionSineR
idx_lists <- idx_lists[[1]]
assign("dataSamprate", dataSamprate, envir = .GlobalEnv)
h5closeAll()
data <- as.vector(h5read(filename,
paste0(channames[chan == dataChan, name], "/values/"),
index = list(idx_lists[1]:idx_lists[2],1)))
h5closeAll()
t_seg <- seq.int(from = codedt[start_idx == idx_lists[1], start_time],
to = codedt[start_idx == idx_lists[1], end_time],
length.out = length(data))
dt <- data.table(t = t_seg,
channel = data)
rm(t_seg, data)
## add time and code markers
dt[, code := codedt[start_idx == idx_lists[1], lettercode]]
dt[, time := codedt[start_idx == idx_lists[1], time]]
## perform DC remove of each channel
#dt[, DC := removeDC(channel, 1000)]
dt_sum <- dt[startFit:endFit, sineOptR(x = channel, t = t, samprate = dataSamprate), by = c("code", "time")]
detach("package:simbaR", unload = TRUE)
library(simbaR)
dt_sum <- dt[startFit:endFit, sineOptR(x = channel, t = t, samprate = dataSamprate), by = c("code", "time")]
View(dt_sum)
detach("package:simbaR", unload = TRUE)
library(simbaR)
detach("package:simbaR", unload = TRUE)
library(simbaR)
dt_sum <- dt[startFit:endFit, sineOptR(y = channel, t = t, samprate = dataSamprate), by = c("code", "time")]
y <- dt[startFit:endFit, channel]
fn <- file.choose()
filename <- fn
dataChan <- "Ch1"
markChan <- "Ch4"
offset <- -200
width <- 30
names <- data.table(h5ls(filename))
## read in file channel information
channames <- data.table(name = names[group == "/", name])
channames[, "chan" := gsub("^.*_", "", name)]
## create data.table for data channel
dataTitle <- intToUtf8(h5read(filename, paste0(channames[chan == dataChan, name], "/title/"))[1,])
dataSamprate <- h5read(filename, paste0(channames[chan == dataChan, name], "/interval/"))[1,]
dataStime <- h5read(filename, paste0(channames[chan == dataChan, name], "/start/"))[,1]
dataLen <- h5read(filename, paste0(channames[chan == dataChan, name], "/length/"))[,1]
assign("dataSamprate", dataSamprate, envir = .GlobalEnv)
## create time data.table for entire file
t <- seq.int(from = dataStime, to = dataStime + dataLen*dataSamprate, length.out = dataLen)
dt_time <- data.table(t)
setattr(dt_time, "sorted", "t")
rm(t)
## calculate import start/stop times based on offset and width
startTime <- (offset-width*2)/1000
endTime <- (offset+width*3)/1000
## calculate analysis start/stop times based on offset and width
startFit <- (2*width/1000)/dataSamprate + 1
endFit <- startFit + (width/1000)/dataSamprate - 1
## create data.table for marker channel
markTitle <- intToUtf8(h5read(filename, paste0(channames[chan == markChan, name], "/title/"))[1,])
markCodes <- h5read(filename, paste0(channames[chan == markChan, name], "/codes/"))
markTimes <- h5read(filename, paste0(channames[chan == markChan, name], "/times/"))
codedt <- data.table(time = markTimes[,1], ASCIIcode = markCodes[,1])
rm(markTimes, markCodes)
codedt[, lettercode := intToUtf8(ASCIIcode), by = time]
## get time index for the start of each marker code
codedt[, t_idx := dt_time[.(time), roll = "nearest", which = TRUE]]
codedt[, start_time := dt_time[.(time+startTime), roll = "nearest"]]
codedt[, end_time := dt_time[.(time+endTime), roll = "nearest"]]
codedt[, start_idx := dt_time[.(time+startTime), roll = "nearest", which = TRUE]]
codedt[, end_idx := dt_time[.(time+endTime), roll = "nearest", which = TRUE]]
rm(dt_time)
idx_lists <- mapply(c, codedt[, start_idx], codedt[, end_idx], SIMPLIFY = FALSE, USE.NAMES = FALSE)
## sectionSineR
idx_lists <- idx_lists[[1]]
assign("dataSamprate", dataSamprate, envir = .GlobalEnv)
h5closeAll()
data <- as.vector(h5read(filename,
paste0(channames[chan == dataChan, name], "/values/"),
index = list(idx_lists[1]:idx_lists[2],1)))
h5closeAll()
t_seg <- seq.int(from = codedt[start_idx == idx_lists[1], start_time],
to = codedt[start_idx == idx_lists[1], end_time],
length.out = length(data))
dt <- data.table(t = t_seg,
channel = data)
rm(t_seg, data)
## add time and code markers
dt[, code := codedt[start_idx == idx_lists[1], lettercode]]
dt[, time := codedt[start_idx == idx_lists[1], time]]
## perform DC remove of each channel
#dt[, DC := removeDC(channel, 1000)]
dt_sum <- dt[startFit:endFit, sineOptR(y = channel, t = t, samprate = dataSamprate), by = c("code", "time")]
View(dt_sum)
y <- dt[startFit:endFit, channel]
t <- dt[startFit:endFit, t]
sampfreq <- 1/dataSamprate
fk <- fft(y)
fk <- fk[2:length(fk)/2+1]
fk <- 2*fk[seq(1, length(fk), by = 2)]/length(y)
freq <- (1:(length(fk)))* sampfreq/(2*length(fk))
fft_dt <- data.table(fur = fk, freq = freq, amp = Mod(fk))
#A <- (max(y)-min(y))/2 #amplitude estimate
A <- sqrt(mean(y)^2 + (((max(y)-min(y))/2)^2)/2) #RMS for amplitude estimate
f <- fft_dt[amp == max(amp), freq] #freq estimate
o <- mean(y) #offset estimate
p <- asin(y[1]/o) #phase estimate
resnls <- nls(formula = y ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
p <- 2.9
resnls <- nls(formula = y ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
p <- 0.9
resnls <- nls(formula = y ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
p <- 1
resnls <- nls(formula = y ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
p <- 1.1
resnls <- nls(formula = y ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
p <- 1.5
resnls <- nls(formula = y ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
p <- 1.9
resnls <- nls(formula = y ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
p <- 1.6
resnls <- nls(formula = y ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A,
f = f,
p = p,
o = o))
summary(resnls)
dataChan <- "Ch1"
markChan <- "Ch4"
offset <- -200
width <- 100
names <- data.table(h5ls(filename))
## read in file channel information
channames <- data.table(name = names[group == "/", name])
channames[, "chan" := gsub("^.*_", "", name)]
## create data.table for data channel
dataTitle <- intToUtf8(h5read(filename, paste0(channames[chan == dataChan, name], "/title/"))[1,])
dataSamprate <- h5read(filename, paste0(channames[chan == dataChan, name], "/interval/"))[1,]
dataStime <- h5read(filename, paste0(channames[chan == dataChan, name], "/start/"))[,1]
dataLen <- h5read(filename, paste0(channames[chan == dataChan, name], "/length/"))[,1]
assign("dataSamprate", dataSamprate, envir = .GlobalEnv)
## create time data.table for entire file
t <- seq.int(from = dataStime, to = dataStime + dataLen*dataSamprate, length.out = dataLen)
dt_time <- data.table(t)
setattr(dt_time, "sorted", "t")
rm(t)
## calculate import start/stop times based on offset and width
startTime <- (offset-width*2)/1000
endTime <- (offset+width*3)/1000
## calculate analysis start/stop times based on offset and width
startFit <- (2*width/1000)/dataSamprate + 1
endFit <- startFit + (width/1000)/dataSamprate - 1
## create data.table for marker channel
markTitle <- intToUtf8(h5read(filename, paste0(channames[chan == markChan, name], "/title/"))[1,])
markCodes <- h5read(filename, paste0(channames[chan == markChan, name], "/codes/"))
markTimes <- h5read(filename, paste0(channames[chan == markChan, name], "/times/"))
codedt <- data.table(time = markTimes[,1], ASCIIcode = markCodes[,1])
rm(markTimes, markCodes)
codedt[, lettercode := intToUtf8(ASCIIcode), by = time]
## get time index for the start of each marker code
codedt[, t_idx := dt_time[.(time), roll = "nearest", which = TRUE]]
codedt[, start_time := dt_time[.(time+startTime), roll = "nearest"]]
codedt[, end_time := dt_time[.(time+endTime), roll = "nearest"]]
codedt[, start_idx := dt_time[.(time+startTime), roll = "nearest", which = TRUE]]
codedt[, end_idx := dt_time[.(time+endTime), roll = "nearest", which = TRUE]]
rm(dt_time)
idx_lists <- mapply(c, codedt[, start_idx], codedt[, end_idx], SIMPLIFY = FALSE, USE.NAMES = FALSE)
## sectionSineR
idx_lists <- idx_lists[[1]]
assign("dataSamprate", dataSamprate, envir = .GlobalEnv)
h5closeAll()
data <- as.vector(h5read(filename,
paste0(channames[chan == dataChan, name], "/values/"),
index = list(idx_lists[1]:idx_lists[2],1)))
h5closeAll()
t_seg <- seq.int(from = codedt[start_idx == idx_lists[1], start_time],
to = codedt[start_idx == idx_lists[1], end_time],
length.out = length(data))
dt <- data.table(t = t_seg,
channel = data)
rm(t_seg, data)
## add time and code markers
dt[, code := codedt[start_idx == idx_lists[1], lettercode]]
dt[, time := codedt[start_idx == idx_lists[1], time]]
## perform DC remove of each channel
#dt[, DC := removeDC(channel, 1000)]
dt_sum <- dt[startFit:endFit, sineOptR(y = channel, t = t, samprate = dataSamprate), by = c("code", "time")]
## sineOptR
View(dt_sum)
detach("package:simbaR", unload = TRUE)
library(simbaR)
dt_sum <- dt[startFit:endFit, sineOptR(y = channel, t = t, samprate = dataSamprate), by = c("code", "time")]
View(dt_sum)
library(rhdf5)
library(simbaR)
library(data.table)
library(zoo)
library(future.apply)
fn <- file.choose()
dt_out <- channelSineR(filename = fn,
offset = -200,
width = 100)
detach("package:simbaR", unload = TRUE)
library(simbaR)
dt_out <- channelSineR(filename = fn,
offset = -200,
width = 100)
filename <- fn
dataChan <- "Ch1"
markChan <- "Ch4"
offset <- -200
width <- 100
names <- data.table(h5ls(filename))
## read in file channel information
channames <- data.table(name = names[group == "/", name])
channames[, "chan" := gsub("^.*_", "", name)]
dataTitle <- intToUtf8(h5read(filename, paste0(channames[chan == dataChan, name], "/title/"))[1,])
dataSamprate <- h5read(filename, paste0(channames[chan == dataChan, name], "/interval/"))[1,]
dataStime <- h5read(filename, paste0(channames[chan == dataChan, name], "/start/"))[,1]
dataLen <- h5read(filename, paste0(channames[chan == dataChan, name], "/length/"))[,1]
assign("dataSamprate", dataSamprate, envir = .GlobalEnv)
## create time data.table for entire file
t <- seq.int(from = dataStime, to = dataStime + dataLen*dataSamprate, length.out = dataLen)
dt_time <- data.table(t)
setattr(dt_time, "sorted", "t")
rm(t)
## calculate import start/stop times based on offset and width
startTime <- (offset-width*2)/1000
endTime <- (offset+width*3)/1000
## calculate analysis start/stop times based on offset and width
startFit <- (2*width/1000)/dataSamprate + 1
endFit <- startFit + (width/1000)/dataSamprate - 1
markTitle <- intToUtf8(h5read(filename, paste0(channames[chan == markChan, name], "/title/"))[1,])
markCodes <- h5read(filename, paste0(channames[chan == markChan, name], "/codes/"))
markTimes <- h5read(filename, paste0(channames[chan == markChan, name], "/times/"))
codedt <- data.table(time = markTimes[,1], ASCIIcode = markCodes[,1])
rm(markTimes, markCodes)
codedt[, lettercode := intToUtf8(ASCIIcode), by = time]
## get time index for the start of each marker code
codedt[, t_idx := dt_time[.(time), roll = "nearest", which = TRUE]]
codedt[, start_time := dt_time[.(time+startTime), roll = "nearest"]]
codedt[, end_time := dt_time[.(time+endTime), roll = "nearest"]]
codedt[, start_idx := dt_time[.(time+startTime), roll = "nearest", which = TRUE]]
codedt[, end_idx := dt_time[.(time+endTime), roll = "nearest", which = TRUE]]
rm(dt_time)
idx_lists <- mapply(c, codedt[, start_idx], codedt[, end_idx], SIMPLIFY = FALSE, USE.NAMES = FALSE)
idx_lists <- idx_lists[[1]]
assign("dataSamprate", dataSamprate, envir = .GlobalEnv)
h5closeAll()
data <- as.vector(h5read(filename,
paste0(channames[chan == dataChan, name], "/values/"),
index = list(idx_lists[1]:idx_lists[2],1)))
h5closeAll()
t_seg <- seq.int(from = codedt[start_idx == idx_lists[1], start_time],
to = codedt[start_idx == idx_lists[1], end_time],
length.out = length(data))
dt <- data.table(t = t_seg,
channel = data)
rm(t_seg, data)
## add time and code markers
dt[, code := codedt[start_idx == idx_lists[1], lettercode]]
dt[, time := codedt[start_idx == idx_lists[1], time]]
dt_sum <- dt[startFit:endFit, sineOptR(y = channel, t = t, samprate = dataSamprate), by = c("code", "time")]
y <- dt[startFit:endFit, channel]
t <- dt[startFit:endFit, t]
sampfreq <- 1/samprate
fk <- fft(y)
sampfreq <- 1/dataSamprate
fk <- fft(y)
fk <- fk[2:length(fk)/2+1]
fk <- 2*fk[seq(1, length(fk), by = 2)]/length(y)
freq <- (1:(length(fk)))* sampfreq/(2*length(fk))
fft_dt <- data.table(fur = fk, freq = freq, amp = Mod(fk))
A_est <- sqrt(mean(y)^2 + (((max(y)-min(y))/2)^2)/2) #RMS for amplitude estimate
f_est <- fft_dt[amp == max(amp), freq] #freq estimate
p_est <- asin(y[1]/A_est) #phase estimate
o_est <- mean(y) #offset estimate
resnls <- nls(formula = y ~ I(A*sin(2*pi*f*t + p) + o),
start = list(A = A_est,
f = f_est,
p = p_est,
o = o_est))
A_coef <- summary(resnls)$coefficients[1]
f_coef <- summary(resnls)$coefficients[2]
p_coef <- summary(resnls)$coefficients[3]
o_coef <- summary(resnls)$coefficients[4]
reslm <- lm(y ~ I(A_coef*sin(2*pi*f_coef * t + p_coef) + o_coef))
return(list(fitStart = min(t),
fitEnd = max(t),
amplitude = A_coef,
freq = f_coef,
phase = p_coef,
offset = o_coef,
rsqr = summary(reslm)$adj.r.squared))
View(dt_sum)
dt_out <- channelSineR(filename = fn,
offset = -200,
width = 100)
detach("package:simbaR", unload = TRUE)
library(simbaR)
dt_out <- channelSineR(filename = fn,
offset = -200,
width = 100)
dt_out <- channelSineR(filename = fn,
offset = -200,
width = 100)
View(sineOptR)
dt_out <- channelSineR(filename = fn,
offset = -200,
width = 100)
quit
exit
library(simbaR)
library(simbaR)
library(simbaR)
